/**
 * because a dynamic directive yet is not implemented,
 * we have a base class which will
 * help us to implement position calculation in our
 * components
 */
var BaseComponent = /** @class */ (function () {
    function BaseComponent(document, elementRef, renderer) {
        this.document = document;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.eventHooks = [];
        this.window = { pageXOffset: 0, pageYOffset: 0 };
        this.window = document.defaultView;
        this.requestAnimationFrame = this.getRequestAnimationFrame();
    }
    BaseComponent.prototype.onEventChange = function (event) {
        var _this = this;
        this.calculate(event);
        this.eventHooks.push(this.renderer.listen(this.document, 'mouseup', function () { return _this.removeListeners(); }));
        this.eventHooks.push(this.renderer.listen(this.document, 'touchend', function () { return _this.removeListeners(); }));
        this.eventHooks.push(this.renderer.listen(this.document, 'mousemove', function (e) { return _this.calculate(e); }));
        this.eventHooks.push(this.renderer.listen(this.document, 'touchmove', function (e) { return _this.calculate(e); }));
    };
    BaseComponent.prototype.calculateCoordinates = function (event) {
        var _a = this.elementRef.nativeElement.getBoundingClientRect(), elWidth = _a.width, elHeight = _a.height, elTop = _a.top, elLeft = _a.left;
        var pageX = typeof event['pageX'] === 'number' ? event['pageX'] : event['touches'][0].pageX;
        var pageY = typeof event['pageY'] === 'number' ? event['pageY'] : event['touches'][0].pageY;
        var x = Math.max(0, Math.min(pageX - (elLeft + this.window.pageXOffset), elWidth));
        var y = Math.max(0, Math.min(pageY - (elTop + this.window.pageYOffset), elHeight));
        this.movePointer({ x: x, y: y, height: elHeight, width: elWidth });
    };
    BaseComponent.prototype.calculate = function (event) {
        var _this = this;
        event.preventDefault();
        if (!this.requestAnimationFrame) {
            return this.calculateCoordinates(event);
        }
        this.requestAnimationFrame(function () { return _this.calculateCoordinates(event); });
    };
    BaseComponent.prototype.getRequestAnimationFrame = function () {
        return this.window.requestAnimationFrame ||
            this.window.webkitRequestAnimationFrame ||
            this.window.mozRequestAnimationFrame ||
            this.window.oRequestAnimationFrame ||
            this.window.msRequestAnimationFrame;
    };
    BaseComponent.prototype.removeListeners = function () {
        this.eventHooks.forEach(function (cb) { return cb(); });
        this.eventHooks.length = 0;
    };
    BaseComponent.prototype.ngOnDestroy = function () {
        this.removeListeners();
    };
    return BaseComponent;
}());
export { BaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaXBsYWIvbmd4LWNvbG9yLXBpY2tlci8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvcGFydHMvYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7O0dBS0c7QUFDSDtJQU1JLHVCQUE2QixRQUFRLEVBQXFCLFVBQXNCLEVBQXFCLFFBQW1CO1FBQTNGLGFBQVEsR0FBUixRQUFRLENBQUE7UUFBcUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFxQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSmhILGVBQVUsR0FBb0IsRUFBRSxDQUFDO1FBQ2pDLFdBQU0sR0FBUSxFQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBQyxDQUFDO1FBSW5ELElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUNuQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDakUsQ0FBQztJQUlTLHFDQUFhLEdBQXZCLFVBQXdCLEtBQTRCO1FBQXBELGlCQWVDO1FBZEcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV0QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxlQUFlLEVBQUUsRUFBdEIsQ0FBc0IsQ0FBQyxDQUMvRSxDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsZUFBZSxFQUFFLEVBQXRCLENBQXNCLENBQUMsQ0FDaEYsQ0FBQztRQUNGLElBQUks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QUMvQixDQUFDO0lBRU0sbUNBQVcsR0FBbEI7UUFDSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0FBQyxBQW5FRCxJQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogYmVjYXVzZSBhIGR5bmFtaWMgZGlyZWN0aXZlIHlldCBpcyBub3QgaW1wbGVtZW50ZWQsXG4gKiB3ZSBoYXZlIGEgYmFzZSBjbGFzcyB3aGljaCB3aWxsXG4gKiBoZWxwIHVzIHRvIGltcGxlbWVudCBwb3NpdGlvbiBjYWxjdWxhdGlvbiBpbiBvdXJcbiAqIGNvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gICAgcHJpdmF0ZSBldmVudEhvb2tzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcbiAgICBwcml2YXRlIHdpbmRvdzogYW55ID0ge3BhZ2VYT2Zmc2V0OiAwLCBwYWdlWU9mZnNldDogMH07XG4gICAgcHJpdmF0ZSByZWFkb25seSByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRvY3VtZW50LCBwcm90ZWN0ZWQgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHJlYWRvbmx5IHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICAgICAgdGhpcy53aW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICAgICAgdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB0aGlzLmdldFJlcXVlc3RBbmltYXRpb25GcmFtZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhYnN0cmFjdCBtb3ZlUG9pbnRlcihjb29yZGluYXRlczoge3g6IG51bWJlcjsgeTogbnVtYmVyOyBoZWlnaHQ6IG51bWJlcjsgd2lkdGg6IG51bWJlcjt9KTogdm9pZDtcblxuICAgIHByb3RlY3RlZCBvbkV2ZW50Q2hhbmdlKGV2ZW50OiBNb3VzZUV2ZW50fFRvdWNoRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGUoZXZlbnQpO1xuXG4gICAgICAgIHRoaXMuZXZlbnRIb29rcy5wdXNoKFxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5kb2N1bWVudCwgJ21vdXNldXAnLCAoKSA9PiB0aGlzLnJlbW92ZUxpc3RlbmVycygpKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmV2ZW50SG9va3MucHVzaChcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuZG9jdW1lbnQsICd0b3VjaGVuZCcsICgpID0+IHRoaXMucmVtb3ZlTGlzdGVuZXJzKCkpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZXZlbnRIb29rcy5wdXNoKFxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5kb2N1bWVudCwgJ21vdXNlbW92ZScsIChlKSA9PiB0aGlzLmNhbGN1bGF0ZShlKSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5ldmVudEhvb2tzLnB1c2goXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmRvY3VtZW50LCAndG91Y2htb3ZlJywgKGUpID0+IHRoaXMuY2FsY3VsYXRlKGUpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FsY3VsYXRlQ29vcmRpbmF0ZXMoZXZlbnQ6IE1vdXNlRXZlbnR8VG91Y2hFdmVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IHdpZHRoOiBlbFdpZHRoLCBoZWlnaHQ6IGVsSGVpZ2h0LCB0b3A6IGVsVG9wLCBsZWZ0OiBlbExlZnQgfSA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGNvbnN0IHBhZ2VYID0gdHlwZW9mIGV2ZW50WydwYWdlWCddID09PSAnbnVtYmVyJyA/IGV2ZW50WydwYWdlWCddIDogZXZlbnRbJ3RvdWNoZXMnXVswXS5wYWdlWDtcbiAgICAgICAgY29uc3QgcGFnZVkgPSB0eXBlb2YgZXZlbnRbJ3BhZ2VZJ10gPT09ICdudW1iZXInID8gZXZlbnRbJ3BhZ2VZJ10gOiBldmVudFsndG91Y2hlcyddWzBdLnBhZ2VZO1xuXG4gICAgICAgIGNvbnN0IHggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihwYWdlWCAtIChlbExlZnQgKyB0aGlzLndpbmRvdy5wYWdlWE9mZnNldCksIGVsV2lkdGgpKTtcbiAgICAgICAgY29uc3QgeSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHBhZ2VZIC0gKGVsVG9wICsgdGhpcy53aW5kb3cucGFnZVlPZmZzZXQpLCBlbEhlaWdodCkpO1xuXG4gICAgICAgIHRoaXMubW92ZVBvaW50ZXIoe3gsIHksIGhlaWdodDogZWxIZWlnaHQsIHdpZHRoOiBlbFdpZHRoIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FsY3VsYXRlKGV2ZW50OiBNb3VzZUV2ZW50fFRvdWNoRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKCF0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlQ29vcmRpbmF0ZXMoZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5jYWxjdWxhdGVDb29yZGluYXRlcyhldmVudCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UmVxdWVzdEFuaW1hdGlvbkZyYW1lKCk6IEZ1bmN0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgIHRoaXMud2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgIHRoaXMud2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgIHRoaXMud2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICB0aGlzLndpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZUxpc3RlbmVycygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ldmVudEhvb2tzLmZvckVhY2goKGNiKSA9PiBjYigpKTtcbiAgICAgICAgdGhpcy5ldmVudEhvb2tzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICAgIH1cbn0iXX0=