/**
 * because a dynamic directive yet is not implemented,
 * we have a base class which will
 * help us to implement position calculation in our
 * components
 */
export class BaseComponent {
    constructor(document, elementRef, renderer) {
        this.document = document;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.eventHooks = [];
        this.window = { pageXOffset: 0, pageYOffset: 0 };
        this.window = document.defaultView;
        this.requestAnimationFrame = this.getRequestAnimationFrame();
    }
    onEventChange(event) {
        this.calculate(event);
        this.eventHooks.push(this.renderer.listen(this.document, 'mouseup', () => this.removeListeners()));
        this.eventHooks.push(this.renderer.listen(this.document, 'touchend', () => this.removeListeners()));
        this.eventHooks.push(this.renderer.listen(this.document, 'mousemove', (e) => this.calculate(e)));
        this.eventHooks.push(this.renderer.listen(this.document, 'touchmove', (e) => this.calculate(e)));
    }
    calculateCoordinates(event) {
        const { width: elWidth, height: elHeight, top: elTop, left: elLeft } = this.elementRef.nativeElement.getBoundingClientRect();
        const pageX = typeof event['pageX'] === 'number' ? event['pageX'] : event['touches'][0].pageX;
        const pageY = typeof event['pageY'] === 'number' ? event['pageY'] : event['touches'][0].pageY;
        const x = Math.max(0, Math.min(pageX - (elLeft + this.window.pageXOffset), elWidth));
        const y = Math.max(0, Math.min(pageY - (elTop + this.window.pageYOffset), elHeight));
        this.movePointer({ x, y, height: elHeight, width: elWidth });
    }
    calculate(event) {
        event.preventDefault();
        if (!this.requestAnimationFrame) {
            return this.calculateCoordinates(event);
        }
        this.requestAnimationFrame(() => this.calculateCoordinates(event));
    }
    getRequestAnimationFrame() {
        return this.window.requestAnimationFrame ||
            this.window.webkitRequestAnimationFrame ||
            this.window.mozRequestAnimationFrame ||
            this.window.oRequestAnimationFrame ||
            this.window.msRequestAnimationFrame;
    }
    removeListeners() {
        this.eventHooks.forEach((cb) => cb());
        this.eventHooks.length = 0;
    }
    ngOnDestroy() {
        this.removeListeners();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaXBsYWIvbmd4LWNvbG9yLXBpY2tlci8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvcGFydHMvYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQWdCLGFBQWE7SUFNL0IsWUFBNkIsUUFBUSxFQUFxQixVQUFzQixFQUFxQixRQUFtQjtRQUEzRixhQUFRLEdBQVIsUUFBUSxDQUFBO1FBQXFCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBcUIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUpoSCxlQUFVLEdBQW9CLEVBQUUsQ0FBQztRQUNqQyxXQUFNLEdBQVEsRUFBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUMsQ0FBQztRQUluRCxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDbkMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ2pFLENBQUM7SUFJUyxhQUFhLENBQUMsS0FBNEI7UUFDaEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV0QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQy9FLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQ2hGLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLElB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QUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBiZWNhdXNlIGEgZHluYW1pYyBkaXJlY3RpdmUgeWV0IGlzIG5vdCBpbXBsZW1lbnRlZCxcbiAqIHdlIGhhdmUgYSBiYXNlIGNsYXNzIHdoaWNoIHdpbGxcbiAqIGhlbHAgdXMgdG8gaW1wbGVtZW50IHBvc2l0aW9uIGNhbGN1bGF0aW9uIGluIG91clxuICogY29tcG9uZW50c1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgICBwcml2YXRlIGV2ZW50SG9va3M6IEFycmF5PEZ1bmN0aW9uPiA9IFtdO1xuICAgIHByaXZhdGUgd2luZG93OiBhbnkgPSB7cGFnZVhPZmZzZXQ6IDAsIHBhZ2VZT2Zmc2V0OiAwfTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlcXVlc3RBbmltYXRpb25GcmFtZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZG9jdW1lbnQsIHByb3RlY3RlZCByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgcmVhZG9ubHkgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgICAgICB0aGlzLndpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgICAgICB0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHRoaXMuZ2V0UmVxdWVzdEFuaW1hdGlvbkZyYW1lKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFic3RyYWN0IG1vdmVQb2ludGVyKGNvb3JkaW5hdGVzOiB7eDogbnVtYmVyOyB5OiBudW1iZXI7IGhlaWdodDogbnVtYmVyOyB3aWR0aDogbnVtYmVyO30pOiB2b2lkO1xuXG4gICAgcHJvdGVjdGVkIG9uRXZlbnRDaGFuZ2UoZXZlbnQ6IE1vdXNlRXZlbnR8VG91Y2hFdmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZShldmVudCk7XG5cbiAgICAgICAgdGhpcy5ldmVudEhvb2tzLnB1c2goXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmRvY3VtZW50LCAnbW91c2V1cCcsICgpID0+IHRoaXMucmVtb3ZlTGlzdGVuZXJzKCkpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZXZlbnRIb29rcy5wdXNoKFxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5kb2N1bWVudCwgJ3RvdWNoZW5kJywgKCkgPT4gdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5ldmVudEhvb2tzLnB1c2goXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmRvY3VtZW50LCAnbW91c2Vtb3ZlJywgKGUpID0+IHRoaXMuY2FsY3VsYXRlKGUpKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmV2ZW50SG9va3MucHVzaChcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuZG9jdW1lbnQsICd0b3VjaG1vdmUnLCAoZSkgPT4gdGhpcy5jYWxjdWxhdGUoZSkpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVDb29yZGluYXRlcyhldmVudDogTW91c2VFdmVudHxUb3VjaEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGg6IGVsV2lkdGgsIGhlaWdodDogZWxIZWlnaHQsIHRvcDogZWxUb3AsIGxlZnQ6IGVsTGVmdCB9ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgY29uc3QgcGFnZVggPSB0eXBlb2YgZXZlbnRbJ3BhZ2VYJ10gPT09ICdudW1iZXInID8gZXZlbnRbJ3BhZ2VYJ10gOiBldmVudFsndG91Y2hlcyddWzBdLnBhZ2VYO1xuICAgICAgICBjb25zdCBwYWdlWSA9IHR5cGVvZiBldmVudFsncGFnZVknXSA9PT0gJ251bWJlcicgPyBldmVudFsncGFnZVknXSA6IGV2ZW50Wyd0b3VjaGVzJ11bMF0ucGFnZVk7XG5cbiAgICAgICAgY29uc3QgeCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHBhZ2VYIC0gKGVsTGVmdCArIHRoaXMud2luZG93LnBhZ2VYT2Zmc2V0KSwgZWxXaWR0aCkpO1xuICAgICAgICBjb25zdCB5ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocGFnZVkgLSAoZWxUb3AgKyB0aGlzLndpbmRvdy5wYWdlWU9mZnNldCksIGVsSGVpZ2h0KSk7XG5cbiAgICAgICAgdGhpcy5tb3ZlUG9pbnRlcih7eCwgeSwgaGVpZ2h0OiBlbEhlaWdodCwgd2lkdGg6IGVsV2lkdGggfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGUoZXZlbnQ6IE1vdXNlRXZlbnR8VG91Y2hFdmVudCk6IHZvaWQge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoIXRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVDb29yZGluYXRlcyhldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmNhbGN1bGF0ZUNvb3JkaW5hdGVzKGV2ZW50KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTogRnVuY3Rpb24ge1xuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgdGhpcy53aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgdGhpcy53aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgdGhpcy53aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgIHRoaXMud2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlTGlzdGVuZXJzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmV2ZW50SG9va3MuZm9yRWFjaCgoY2IpID0+IGNiKCkpO1xuICAgICAgICB0aGlzLmV2ZW50SG9va3MubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgfVxufSJdfQ==