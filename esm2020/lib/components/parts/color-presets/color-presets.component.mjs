import { Component, Input, EventEmitter, Output, ChangeDetectionStrategy } from '@angular/core';
import { Color } from './../../../helpers/color.class';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../color-preset/color-preset.component";
import * as i3 from "../color-preset-sublist/color-preset-sublist.component";
import * as i4 from "../../../pipes/chunks.pipe";
export class ColorPresetsComponent {
    constructor() {
        this.columns = 8;
        this.hueChange = new EventEmitter(false);
        this.colorChange = new EventEmitter(false);
        this.direction = 'up';
    }
    onSelectionChange(color) {
        const selectedRgbaColor = color.getRgba();
        const selectedHsvaColor = color.getHsva();
        const newColor = new Color()
            .setRgba(selectedRgbaColor.red, selectedRgbaColor.green, selectedRgbaColor.blue, selectedRgbaColor.alpha);
        const hueColor = new Color().setHsva(selectedHsvaColor.hue);
        this.hueChange.emit(hueColor);
        this.colorChange.emit(newColor);
    }
    isList(colorPreset) {
        return Array.isArray(colorPreset);
    }
}
ColorPresetsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.1", ngImport: i0, type: ColorPresetsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ColorPresetsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.1", type: ColorPresetsComponent, selector: "color-presets-component", inputs: { columns: "columns", colorPresets: "colorPresets", hue: "hue", color: "color", direction: "direction" }, outputs: { hueChange: "hueChange", colorChange: "colorChange" }, ngImport: i0, template: "<div class=\"row\" *ngFor=\"let chunk of colorPresets | chunks: columns; let first = first; let last = last;\" [ngClass]=\"{ 'first': first, 'last': last }\">\n    <ng-template ngFor let-preset let-first=\"first\" let-last=\"last\" [ngForOf]=\"chunk\">\n        <color-preset-sublist \n            [list]=\"preset\" \n            *ngIf=\"isList(preset); else colorPreset\" \n            [direction]=\"direction\"\n            [activeColor]=\"color\"\n            [ngClass]=\"{ 'first': first, 'last': last }\"\n            (selectionChange)=\"onSelectionChange($event)\"></color-preset-sublist>\n\n        <ng-template #colorPreset>\n            <color-preset \n                [ngClass]=\"{ 'first': first, 'last': last }\"\n                [color]=\"preset\" \n                [activeColor]=\"color\" \n                (selectionChange)=\"onSelectionChange($event)\"></color-preset>\n        </ng-template>\n    </ng-template>\n</div>", styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}\n", ":host{display:block;font-size:0}:host .row:first-child{padding:0}color-preset-sublist:first-child,color-preset:first-child{margin:0}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.ColorPresetComponent, selector: "color-preset", inputs: ["activeColor", "color", "show-depth-title"], outputs: ["selectionChange", "longPress"] }, { kind: "component", type: i3.ColorPresetSublist, selector: "color-preset-sublist", inputs: ["list", "direction", "activeColor"], outputs: ["selectionChange"] }, { kind: "pipe", type: i4.ChunksPipe, name: "chunks" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.1", ngImport: i0, type: ColorPresetsComponent, decorators: [{
            type: Component,
            args: [{ selector: `color-presets-component`, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"row\" *ngFor=\"let chunk of colorPresets | chunks: columns; let first = first; let last = last;\" [ngClass]=\"{ 'first': first, 'last': last }\">\n    <ng-template ngFor let-preset let-first=\"first\" let-last=\"last\" [ngForOf]=\"chunk\">\n        <color-preset-sublist \n            [list]=\"preset\" \n            *ngIf=\"isList(preset); else colorPreset\" \n            [direction]=\"direction\"\n            [activeColor]=\"color\"\n            [ngClass]=\"{ 'first': first, 'last': last }\"\n            (selectionChange)=\"onSelectionChange($event)\"></color-preset-sublist>\n\n        <ng-template #colorPreset>\n            <color-preset \n                [ngClass]=\"{ 'first': first, 'last': last }\"\n                [color]=\"preset\" \n                [activeColor]=\"color\" \n                (selectionChange)=\"onSelectionChange($event)\"></color-preset>\n        </ng-template>\n    </ng-template>\n</div>", styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}\n", ":host{display:block;font-size:0}:host .row:first-child{padding:0}color-preset-sublist:first-child,color-preset:first-child{margin:0}\n"] }]
        }], propDecorators: { columns: [{
                type: Input
            }], colorPresets: [{
                type: Input
            }], hue: [{
                type: Input
            }], hueChange: [{
                type: Output
            }], color: [{
                type: Input
            }], colorChange: [{
                type: Output
            }], direction: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcHJlc2V0cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pcGxhYi9uZ3gtY29sb3ItcGlja2VyL3NyYy9saWIvY29tcG9uZW50cy9wYXJ0cy9jb2xvci1wcmVzZXRzL2NvbG9yLXByZXNldHMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaXBsYWIvbmd4LWNvbG9yLXBpY2tlci9zcmMvbGliL2NvbXBvbmVudHMvcGFydHMvY29sb3ItcHJlc2V0cy9jb2xvci1wcmVzZXRzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7QUFXdkQsTUFBTSxPQUFPLHFCQUFxQjtJQVRsQztRQVlXLFlBQU8sR0FBVyxDQUFDLENBQUM7UUFTcEIsY0FBUyxHQUFHLElBQUksWUFBWSxDQUFRLEtBQUssQ0FBQyxDQUFDO1FBTTNDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLENBQVEsS0FBSyxDQUFDLENBQUM7UUFHN0MsY0FBUyxHQUFxQyxJQUFJLENBQUM7S0FpQjdEO0lBZlUsaUJBQWlCLENBQUMsS0FBWTtRQUNqQyxNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQyxNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUUxQyxNQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssRUFBRTthQUN2QixPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUcsTUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFNUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUF3QztRQUNsRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7a0hBckNRLHFCQUFxQjtzR0FBckIscUJBQXFCLGtQQ1psQywwNkJBa0JNOzJGRE5PLHFCQUFxQjtrQkFUakMsU0FBUzsrQkFDSSx5QkFBeUIsbUJBTWxCLHVCQUF1QixDQUFDLE1BQU07OEJBS3hDLE9BQU87c0JBRGIsS0FBSztnQkFJQyxZQUFZO3NCQURsQixLQUFLO2dCQUlDLEdBQUc7c0JBRFQsS0FBSztnQkFJQyxTQUFTO3NCQURmLE1BQU07Z0JBSUEsS0FBSztzQkFEWCxLQUFLO2dCQUlDLFdBQVc7c0JBRGpCLE1BQU07Z0JBSUEsU0FBUztzQkFEZixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4vLi4vLi4vLi4vaGVscGVycy9jb2xvci5jbGFzcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBgY29sb3ItcHJlc2V0cy1jb21wb25lbnRgLFxuICAgIHRlbXBsYXRlVXJsOiBgLi9jb2xvci1wcmVzZXRzLmNvbXBvbmVudC5odG1sYCxcbiAgICBzdHlsZVVybHM6IFtcbiAgICAgICAgYC4vLi4vYmFzZS5zdHlsZS5zY3NzYCxcbiAgICAgICAgYC4vY29sb3ItcHJlc2V0cy5jb21wb25lbnQuc2Nzc2BcbiAgICBdLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIENvbG9yUHJlc2V0c0NvbXBvbmVudCB7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb2x1bW5zOiBudW1iZXIgPSA4O1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY29sb3JQcmVzZXRzOiBBcnJheTxBcnJheTxDb2xvcj4gfCBDb2xvcj47XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBodWU6IENvbG9yO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIGh1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q29sb3I+KGZhbHNlKTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbG9yOiBDb2xvcjtcblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBjb2xvckNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q29sb3I+KGZhbHNlKTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGRpcmVjdGlvbjogJ2Rvd24nIHwgJ3VwJyB8ICdsZWZ0JyB8ICdyaWdodCcgPSAndXAnO1xuXG4gICAgcHVibGljIG9uU2VsZWN0aW9uQ2hhbmdlKGNvbG9yOiBDb2xvcik6IHZvaWQge1xuICAgICAgICBjb25zdCBzZWxlY3RlZFJnYmFDb2xvciA9IGNvbG9yLmdldFJnYmEoKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRIc3ZhQ29sb3IgPSBjb2xvci5nZXRIc3ZhKCk7XG5cbiAgICAgICAgY29uc3QgbmV3Q29sb3IgPSBuZXcgQ29sb3IoKVxuICAgICAgICAgICAgLnNldFJnYmEoc2VsZWN0ZWRSZ2JhQ29sb3IucmVkLCBzZWxlY3RlZFJnYmFDb2xvci5ncmVlbiwgc2VsZWN0ZWRSZ2JhQ29sb3IuYmx1ZSwgc2VsZWN0ZWRSZ2JhQ29sb3IuYWxwaGEpO1xuICAgICAgICBjb25zdCBodWVDb2xvciA9IG5ldyBDb2xvcigpLnNldEhzdmEoc2VsZWN0ZWRIc3ZhQ29sb3IuaHVlKTtcblxuICAgICAgICB0aGlzLmh1ZUNoYW5nZS5lbWl0KGh1ZUNvbG9yKTtcbiAgICAgICAgdGhpcy5jb2xvckNoYW5nZS5lbWl0KG5ld0NvbG9yKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNMaXN0KGNvbG9yUHJlc2V0OiBBcnJheTxBcnJheTxDb2xvcj4gfCBDb2xvcj4pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY29sb3JQcmVzZXQpO1xuICAgIH1cbn0iLCI8ZGl2IGNsYXNzPVwicm93XCIgKm5nRm9yPVwibGV0IGNodW5rIG9mIGNvbG9yUHJlc2V0cyB8IGNodW5rczogY29sdW1uczsgbGV0IGZpcnN0ID0gZmlyc3Q7IGxldCBsYXN0ID0gbGFzdDtcIiBbbmdDbGFzc109XCJ7ICdmaXJzdCc6IGZpcnN0LCAnbGFzdCc6IGxhc3QgfVwiPlxuICAgIDxuZy10ZW1wbGF0ZSBuZ0ZvciBsZXQtcHJlc2V0IGxldC1maXJzdD1cImZpcnN0XCIgbGV0LWxhc3Q9XCJsYXN0XCIgW25nRm9yT2ZdPVwiY2h1bmtcIj5cbiAgICAgICAgPGNvbG9yLXByZXNldC1zdWJsaXN0IFxuICAgICAgICAgICAgW2xpc3RdPVwicHJlc2V0XCIgXG4gICAgICAgICAgICAqbmdJZj1cImlzTGlzdChwcmVzZXQpOyBlbHNlIGNvbG9yUHJlc2V0XCIgXG4gICAgICAgICAgICBbZGlyZWN0aW9uXT1cImRpcmVjdGlvblwiXG4gICAgICAgICAgICBbYWN0aXZlQ29sb3JdPVwiY29sb3JcIlxuICAgICAgICAgICAgW25nQ2xhc3NdPVwieyAnZmlyc3QnOiBmaXJzdCwgJ2xhc3QnOiBsYXN0IH1cIlxuICAgICAgICAgICAgKHNlbGVjdGlvbkNoYW5nZSk9XCJvblNlbGVjdGlvbkNoYW5nZSgkZXZlbnQpXCI+PC9jb2xvci1wcmVzZXQtc3VibGlzdD5cblxuICAgICAgICA8bmctdGVtcGxhdGUgI2NvbG9yUHJlc2V0PlxuICAgICAgICAgICAgPGNvbG9yLXByZXNldCBcbiAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJ7ICdmaXJzdCc6IGZpcnN0LCAnbGFzdCc6IGxhc3QgfVwiXG4gICAgICAgICAgICAgICAgW2NvbG9yXT1cInByZXNldFwiIFxuICAgICAgICAgICAgICAgIFthY3RpdmVDb2xvcl09XCJjb2xvclwiIFxuICAgICAgICAgICAgICAgIChzZWxlY3Rpb25DaGFuZ2UpPVwib25TZWxlY3Rpb25DaGFuZ2UoJGV2ZW50KVwiPjwvY29sb3ItcHJlc2V0PlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvbmctdGVtcGxhdGU+XG48L2Rpdj4iXX0=